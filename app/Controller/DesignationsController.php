<?php

App::uses('AppController', 'Controller');

/**
 * Designations Controller
 * Owner: Abdul Jalil
 * http://www.softwareend.com
 * @property Designation $Designation
 * @property PaginatorComponent $Paginator
 */
class DesignationsController extends AppController {

    /**
     * Components
     *
     * @var array
     */
    public $components = array('Paginator');

    /**
     * index method
     * Generated by Abdul Jalil
     * @return void
     */
    public function index() {
        $this->Designation->recursive = 0;
        $conditions = array();
        if (!empty($this->request->data['Src']['company_id'])) {
            $conditions[] = array("Department.company_id " => $this->request->data['Src']['company_id']);
        }
        if (!empty($this->request->data['Src']['department_id'])) {
            $conditions[] = array("Designation.department_id " => $this->request->data['Src']['department_id']);
        }
        if (!empty($this->request->data['Src']['name'])) {
            $conditions[] = array("Designation.name LIKE '%" . $this->request->data['Src']['name'] . "%'");
        }
        $this->Paginator->settings = array('conditions' => $conditions, 'order' => array('Designation.id' => 'DESC'));
        $this->set('designations', $this->Paginator->paginate());

        $this->loadModel('User');
        $users = $this->User->find('list', array('conditions' => array('status' => E_ERROR), 'order' => array('name' => 'ASC')));
        $this->set('users', $users);

        $companies = $this->Designation->Department->Company->find('list', array('conditions' => array('status' => E_ERROR), 'order' => array('name' => 'ASC')));
        $companyls = $this->Designation->Department->Company->find('all', array('fields' => array('color', 'name', 'short_name', 'id'), 'order' => array('name' => 'ASC'), 'recursive' => -1));
        $companys = array();
        foreach ($companyls as $company) {
            $companys[$company['Company']['id']] = array($company['Company']['color'], $company['Company']['name'], $company['Company']['short_name'], $company['Company']['id']);
        }

        $this->set(compact('companies', 'companys'));
    }

    /**
     * add method
     *
     * @return void
     */
    public function add() {
        if ($this->request->is('post')) {
            $this->Designation->create();
            $this->request->data['Designation']['entry_by'] = $this->Auth->user('id');
            if ($this->Designation->save($this->request->data)) {

                $data = $this->encode($this->request->data);
                $this->curlSend('designations/ajax_add', array('_t_' => time(), 'd' => $data));

                $this->Flash->success('The designation has been saved.');
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error('The designation could not be saved. Please, try again.');
            }
        }

        $companies = $this->Designation->Department->Company->find('list', array('conditions' => array('status' => E_ERROR), 'order' => array('name' => 'ASC')));
        $this->set(compact('companies'));
    }

    /**
     * edit method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function edit($id = null) {
        if (!$this->Designation->exists($id)) {
            throw new NotFoundException(__('Invalid designation'));
        }
        if ($this->request->isPost() || $this->request->isPut()) {
            $this->request->data['Designation']['edit_by'] = $this->Auth->user('id');
            if ($this->Designation->save($this->request->data)) {

                $data = $this->encode($this->request->data);
                $this->curlSend('designations/ajax_edit', array('_t_' => time(), 'd' => $data));

                $this->Flash->success('The designation has been updated.');
                return $this->redirect(array('action' => 'index'));
            } else {
                $this->Flash->error('The designation could not be updated. Please, try again.');
            }
        } else {
            $options = array('conditions' => array('Designation.' . $this->Designation->primaryKey => $id));
            $this->request->data = $this->Designation->find('first', $options);
        }

        $companies = $this->Designation->Department->Company->find('list', array('conditions' => array('status' => E_ERROR), 'order' => array('name' => 'ASC')));
        $this->set(compact('companies'));
    }

    /**
     * delete method
     *
     * @throws NotFoundException
     * @param string $id
     * @return void
     */
    public function delete($id = null) {
        $this->Designation->id = $id;
        if (!$this->Designation->exists()) {
            throw new NotFoundException(__('Invalid designation'));
        }

        $this->loadModel('Section');
        $section = $this->Section->find('first', array('conditions' => array('designation_id' => $id)));
        if (count($section) > 0) {
            $this->Flash->error('The designation has section, could not be deleted.');
        } else {
            $this->request->allowMethod('post', 'delete');
            if ($this->Designation->delete()) {

                $data = $this->encode($id . '|' . time());
                $this->curlSend('designations/ajax_delete', array('_t_' => time(), 'd' => $data));

                $this->Flash->success('The designation has been deleted.');
            } else {
                $this->Flash->error('The designation could not be deleted. Please, try again.');
            }
            return $this->redirect(array('action' => 'index'));
        }
    }

    public function ajax_getdesignations() {
        $this->layout = 'ajax';

        $designations = $this->Designation->find('list', array('conditions' => array('department_id' => $this->request->data('department_id')), 'order' => array('name' => 'ASC')));
        $this->set('designations', $designations);
        $this->set('model', $this->request->data('model'));
        $this->set('designation_id', $this->request->data('designation_id'));
        $this->set('required', $this->request->data('required'));
        $this->set('label', $this->request->data('label'));
    }

    public function ajax_getdesignation() {
        $this->layout = 'ajax';

        $designation = $this->Designation->find('first', array(
            'fields' => array('Designation.name', 'Designation.color_code'),
            'conditions' => array('User.id' => $this->request->data('designation_id')),
            'joins' => array(
                array(
                    'table' => 'users',
                    'alias' => 'User',
                    'type' => 'LEFT',
                    'conditions' => array(
                        'User.designation_id = Designation.id'
                    )
                )
            ),
            'recursive' => -1)
        );

        $this->set('designation', $designation);
    }

    /**
     * check username exist by ajax
     *
     * @throws NotFoundException
     * @param string $username
     * @return void
     */
    public function ajax_checkdesignation() {
        $this->autoRender = FALSE;

        $conditions = ["name" => $this->request->data('ttl'), "department_id" => $this->request->data('department_id')];
        if ($this->request->data('uid')) {
            $conditions[] = ["id <> " . $this->request->data('uid')];
        }

        $user = $this->Designation->find('first', array('conditions' => $conditions, 'fields' => array('id'), 'recursive' => -1));
        if (count($user) > 0) {
            echo 'Please use another name';
        } else {
            echo false;
        }
    }

}
